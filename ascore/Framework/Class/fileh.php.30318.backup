<?php

/* Extensión de la clase fileh */

function donothing() {
	return True;

}

function save() {

	global $SYS,$FAMILYLABEL;

 	debug("Info: Calling Extended save");
	$par=new Ente($this->name);
	
	/* Tratamos el fichero */
	
	
	$haveone=False;		
	if (!empty($_FILES[$this->CaptureFile]["name"])) {
		$haveone=True;	
		debug("<font color='#E6A129'>fileh: Fichero subido ".$_FILES[$this->CaptureFile]["name"]."</font>");
	}
	else {
		debug("<font color='#E6A129'>fileh: No se especificó fichero a subir</font>");
		return 0;
	}
		

	if ($this->ID>1) {
        /* El fichero debería de existir */
		if (file_exists($SYS["BASE"]."/Pool/".$FAMILYLABEL[$this->familia_id]."/".$this->md5.".".$this->ext))
			/* El fichero existe debería de ser borrado si tenemos preparado uno nuevo*/
			if ($haveone) {
				unlink($this->localname());
				debug("<font color='#E6A129'>Borrando....".$this->localname()."</font>");
				if ((file_exists($this->thumb()))&&(is_file($this->thumb())))
					unlink($this->thumb());

			}
		else
			debug("<font color='#E6A129'>fileh: Debería de existir ".$this->localname().". Revise el sistema. Continuando</font>");
			
	}		
	
	debug("<font color='#E6A129'>fileh:  Tratamiento de fichero </font>");	
    /* Copiamos el fichero y establecemos propiedades */
	
	$this->md5=md5(time()+$_FILES[$this->CaptureFile]["size"]);
	$this->len=$_FILES[$this->CaptureFile]["size"];
	$this->ext="dat";
	$this->mime=$_FILES[$this->CaptureFile]["type"];
	$this->date=time();

	if (copy($_FILES[$this->CaptureFile]["tmp_name"],
	$SYS["BASE"]."/Pool/".$FAMILYLABEL[$this->familia_id]."/".$this->md5.".".$this->ext))
	{
		$par=typecast($this,"Ente");
		debug("<font color='#E6A129'>fileh: fichero almacenado correctamente:".$this->localname()."</font>");
		return $par->save();

	}
	else
		return 0;
}

function localname() {

	global $SYS,$FAMILYLABEL;

 	return ($SYS["BASE"]."/Pool/".$FAMILYLABEL[$this->familia_id]."/".$this->md5.".".$this->ext);
}

function delete() {

	global $SYS,$FAMILYLABEL;

 	if ($this->ID<2)
		return True;
		
	debug("Info: Calling Extended delete");
	$par=new Ente($this->name);
    $target=$this->localname();
	if (unlink($target)) {
		debug("<font color='#E6A129'>fileh: fichero borrado :".$this->localname()."</font>");
		if ((file_exists($this->thumb()))&&(is_file($this->thumb())))
			unlink($this->thumb());
		$par=typecast($this,"Ente");
		return $par->delete();
	}
	else
		return False;

}
function getRawData() {
	
	$raw_h=fopen($this->localname(),"rb");
	$raw=fread($raw_h,$this->len);
	fclose($raw_h);

	return $raw;
	
}

function as_libjpeg_resize_img($imgname,$width)
{

 $img_src = ImageCreateFromjpeg ($imgname);

 $true_width = imagesx($img_src);
 $true_height = imagesy($img_src);

    $width;
    $height = ($width/$true_width)*$true_height;

 $img_des =  ImageCreateTruecolor($width,$height);
 imagecopyresampled($img_des, $img_src, 0, 0, 0, 0, $width, $height, $true_width, $true_height);
 return $img_des;
}
function as_libjpeg_desize_img($imgname,$height)
{

 $img_src = ImageCreateFromjpeg ($imgname);

 $true_width = imagesx($img_src);
 $true_height = imagesy($img_src);

    $width = ($height/$true_height)*$true_width;

 $img_des =  ImageCreateTruecolor($width,$height);
 imagecopyresampled($img_des, $img_src, 0, 0, 0, 0, $width, $height, $true_width, $true_height);
 return $img_des;
}
function as_libjpeg_img_save($img,$dest) {

return imagejpeg($img,$dest,CALIDAD_JPG);

}

function jpegThumb() {
		
	global $SYS;
	$thumb=$this->as_libjpeg_desize_img($this->localname(),$SYS["thumbsize"]);
	$this->as_libjpeg_img_save($thumb,$this->thumb());


}

function thumb() {

	return $this->localname().".thumb";

}
function createThumb(){

	if ($this->mime=="image/jpeg")
		$this->jpegThumb();

}
function bitch() {
	return str_replace("/",".",$this->mime);
}

?>
